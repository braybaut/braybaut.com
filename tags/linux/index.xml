<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Braybaut</title>
    <link>/tags/linux/</link>
    <description>Recent content in Linux on Braybaut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Dec 2017 01:20:18 +0000</lastBuildDate>
    
	<atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Utilizando Traefik como Dynamic Reverse Proxy en Docker Swarm sobre  AWS</title>
      <link>/posts/utilizando-traefik-como-dynamic-reverse-proxy-en-docker-swarm-sobre-aws/</link>
      <pubDate>Fri, 22 Dec 2017 01:20:18 +0000</pubDate>
      
      <guid>/posts/utilizando-traefik-como-dynamic-reverse-proxy-en-docker-swarm-sobre-aws/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/images/traefik.png&#34; alt=&#34;image1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Traefik es una herramienta muy potente gracias a que soporta varios providers como backend, en este caso usaremos traefik para que nos sirva como &lt;strong&gt;Dynamic Reverse Proxy&lt;/strong&gt; sobre un cluster de &lt;strong&gt;Docker Swarm&lt;/strong&gt; en &lt;strong&gt;Amazon Web Services&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;componentes&#34;&gt;Componentes:&lt;/h3&gt;

&lt;h4 id=&#34;3-instancias-1-manager-y-2-worker&#34;&gt;3 Instancias (1 Manager  y 2 worker):&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Manager: &lt;/strong&gt;Esta instancia sera la que controlara todo el cluster, en ella desplegaremos traefik y los servicios que no son worker, esta instancia estará sobre una subnet , la cual llamaremos &lt;strong&gt;&amp;#8220;subnet frontend&amp;#8221; &lt;/strong&gt;y tendrá su respectivo Secure Group&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Worker: &lt;/strong&gt;las instancias llamadas workers son dichas instancias donde correran nuestros servicios desplegados en AWS, sin tener en cuenta los servicios de &amp;#8220;management&amp;#8221; que podemos desplegar en la subnet de frontend, aquí desplegaremos los servicios que necesitemos como un web server, un micro servicio, etc, estas dos instancias estarán sobre otra subnet, la cual la llamaremos &lt;strong&gt;&amp;#8220;subnet backend&amp;#8221;&lt;/strong&gt; y tendrá su respectivo Secure Group&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Howto: Instalando Rocket.Chat en Docker</title>
      <link>/posts/howto-instalando-rocket.chat-en-docker/</link>
      <pubDate>Tue, 07 Mar 2017 06:54:30 +0000</pubDate>
      
      <guid>/posts/howto-instalando-rocket.chat-en-docker/</guid>
      <description>&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/images/rocketchat1.png&#34; alt=&#34;&#34; /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Rocket.chat para mi es una de las mejores plataformas de chat &lt;strong&gt;OpenSource&lt;/strong&gt; que existen, es muy flexible a la hora de adaptarlo y lo mejor, tiene cliente para toda las plataformas.&lt;/p&gt;

&lt;p&gt;En este caso, realizaremos la instalación de Rocket.chat en &lt;strong&gt;docker&lt;/strong&gt;, por el cual no importara la distribución linux que utilicemos, pero en este caso utilizare Centos 7 como host de mis contenedores para hacer el despliegue.&lt;/p&gt;

&lt;h2 id=&#34;instalación&#34;&gt;Instalación:&lt;/h2&gt;

&lt;p&gt;Vamos a usar varios contenedores y para lograr la comunicación entre ellos, se usara &lt;strong&gt;Docker Compose&lt;/strong&gt;, el cual nos permite hacer despliegues de servicios el cual involucra varios contenedores.&lt;/p&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker:&lt;/h3&gt;

&lt;p&gt;Instalamos docker usando el script que se encuentra en su pagina oficial.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;wget -qO- https://get.docker.com/ | sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Al finalizar el proceso usamos systemctl para subir el servicio y dejarlo habilitado para que inicie cuando se inicie el servidor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;systemctl start enable

systemcl enable docker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Docker: Ingresar al bash de un contenedor iniciado | Script</title>
      <link>/posts/docker-ingresar-al-bash-de-un-contenedor-iniciado-script/</link>
      <pubDate>Tue, 12 Jan 2016 04:40:50 +0000</pubDate>
      
      <guid>/posts/docker-ingresar-al-bash-de-un-contenedor-iniciado-script/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/images/docker.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ultimamente he trabajado mucho con docker y en el maravilloso recorrido que he tenido con docker se me presento un problema gigante,  inicio el contenedor con su servicio pero por X o Y motivo quiero ingresar al bash y el &amp;#8220;docker attach&amp;#8221; no funciona porque el docker no lo inicie con /bin/bash&lt;/p&gt;

&lt;p&gt;Una solución es abrir el puerto 22 e ingresar por ssh, pero no es la gracia trabajar de esta manera ya que estamos con container. Navegando por la red encontré un comando un poco largo para poder ingresar al bash del container y un compañero de la compañía donde trabajo también me paso uno parecido, pero me pareció algo fastidioso usar un comando largo para ingresar al bash entonces me tome la tarea de crear un script para que me facilite esta tarea, se los mostrare:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>